#!/usr/bin/env ruby

require "contracts"
include Contracts

Cycle = Enumerator::Lazy

Contract [String, String] => Num
def int_of_hex_chars(chars)
  chars.join.to_i(16)
end

Contract Cycle => Num
def get_mask(key)
  int_of_hex_chars key.first(2)
end

Contract [], Cycle => []
def decrypt(ciphertext, key)
  []
end

Contract [String], Cycle => nil
def decrypt(ciphertext, key)
  raise "Invalid ciphertext"
end

Contract ArrayOf[String], Cycle => ArrayOf[Num]
def decrypt(ciphertext, key)
  char = int_of_hex_chars(ciphertext.first(2)) ^ get_mask(key)
  [char] + decrypt(ciphertext.drop(2), key.drop(2))
end

ciphertext = STDIN.read.chars
key        = ARGV.last.chars.cycle.lazy

print decrypt(ciphertext, key).map(&:chr).join
