#!/usr/bin/env ruby

require "contracts"
include Contracts

Contract String, String => Num
def int_of_hex_chars(c1, c2)
  (c1 + c2).to_i(16)
end

Contract Enumerator::Lazy => Num
def get_mask(key)
  int_of_hex_chars *key.first(2)
end

Contract ArrayOf[String], Enumerator::Lazy => ArrayOf[Num]
def decrypt(ciphertext, key)
  return [] if ciphertext.empty?
  raise "Invalid ciphertext" if ciphertext.size == 1

  char = int_of_hex_chars(*ciphertext.first(2)) ^ get_mask(key)
  decrypt(ciphertext.drop(2), key.drop(2)).unshift(char)
end

ciphertext = STDIN.read.chars
key        = ARGV.last.chars.cycle.lazy

print decrypt(ciphertext, key).map(&:chr).join
