#!/usr/bin/env ruby

require "contracts"
include Contracts

Char  = -> (c) { c.is_a?(String) && c.length == 1 }
Cycle = Enumerator::Lazy

Contract [Char, Char] => Num
def int_of_hex_chars(chars)
  chars.join.to_i(16)
end

Contract ArrayOf[Num] => String
def hex_string_of_ints(nums)
  nums.map { |n| n.to_s(16) }.join
end

Contract Cycle => Num
def get_mask(key)
  int_of_hex_chars key.first(2)
end

Contract [], Cycle => []
def encrypt(plaintext, key)
  []
end

Contract ArrayOf[Char], Cycle => ArrayOf[Num]
def encrypt(plaintext, key)
  char = plaintext.first.ord ^ get_mask(key)
  [char] + encrypt(plaintext.drop(1), key.drop(2))
end

plaintext = STDIN.read.chars
key       = ARGV.last.chars.cycle.lazy

print hex_string_of_ints(encrypt(plaintext, key))
