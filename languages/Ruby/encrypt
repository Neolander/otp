#!/usr/bin/env ruby

require "contracts"
include Contracts

Contract String, String => Num
def int_of_hex_chars(c1, c2)
  (c1 + c2).to_i(16)
end

Contract ArrayOf[Num] => String
def hex_string_of_ints(nums)
  nums.map { |n| n.to_s(16) }.join
end

Contract Enumerator::Lazy => Num
def get_mask(key)
  int_of_hex_chars *key.first(2)
end

Contract ArrayOf[String], Enumerator::Lazy => ArrayOf[Num]
def encrypt(plaintext, key)
  return [] if plaintext.empty?

  char = plaintext.first.ord ^ get_mask(key)
  encrypt(plaintext.drop(1), key.drop(2)).unshift(char)
end

plaintext = STDIN.read.chars
key       = ARGV.last.chars.cycle.lazy

print hex_string_of_ints(encrypt(plaintext, key))
